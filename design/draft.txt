# 数据	
	Memory
		Conn { fd } // 发送和接收相关的封装

		<fd, Conn> 由fd快速找到连接对象
		
		<user_id, fd> 映射

		<fd, user_id> 映射
		
	Redis
		userid -> Users // hash存储对象，缓存机制
		
		user_ids // set, 永久存储
		
		unread_private: user_id
		{
			0 : 15 // id 0 means broadcast
			userid1: 1
			userid2: 2
		}
		
	Database tables
	
		user
			user_id
			username
			password
		
		private_msg
			id
			user1_id
			user2_id
			msg
			stamp
		
		broadcast
			id
			userid
			msg
			stamp


# 流程

注册
- 注册，提供 { 用户名，密码}，注册账号 { user_id, username, password }，添加到数据库

登录
- 用户登录，服务器去数据库验证，注册 Conn { fd, user_id}

修改用户名
- 更改用户名, 更新数据库，更新redis

获取用户列表
- return [ user_ids, names from user_ids ], 从Redis查找对应名字并返回 // 所有用户列表存在redis

广播消息
- 发送消息到所有的fd
- 保存到数据库，如果到99条就删除一条

私信
- 根据user_id 检查用户是否在线 { map.count(user_id) }, 有就发，没有就存数据库并且未读++
- 如果超过99条就删除一条

加载消息
- 查数据库，返回

断开连接
- 清理Conn, fd, map
